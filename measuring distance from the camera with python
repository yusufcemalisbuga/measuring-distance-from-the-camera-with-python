import cv2
import numpy as np

KNOWN_WIDTH = 10 # width of the object being measured (in cm)
FOCAL_LENGTH = 640 # camera focal length

# function to calculate distance of an object in real world coordinates
def distance_to_camera(known_width, focal_length, per_width):
    return (known_width * focal_length) / per_width

# initialize the camera
cap = cv2.VideoCapture(0)

while True:
    # read image from camera
    ret, frame = cap.read()

    # detect objects, for example, a face
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # calculate the size of the object being detected
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        per_width = w
        distance = distance_to_camera(KNOWN_WIDTH, FOCAL_LENGTH, per_width)
        cv2.putText(frame, "{:.2f}cm".format(distance), (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # show the image
    cv2.imshow('frame',frame)

    # press 'q' to exit the program
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# release the camera
cap.release()
cv2.destroyAllWindows()
